import { Participant } from "../models/Participant.js"
import { Event } from "../models/Event.js"
import { User } from "../models/User.js"
import { v4 as uuidv4 } from "uuid"

// Inscription d'un participant √† un √©v√©nement
export const registerParticipant = async (req, res) => {
  try {
    const { eventId } = req.params
    const { firstName, lastName, email, phone, company, position, dietaryRestrictions, specialNeeds } = req.body

    console.log("üéØ Inscription participant:", {
      eventId,
      email,
      hasUser: !!req.user,
      body: req.body,
    })

    // Validation des donn√©es requises
    if (!firstName || !lastName || !email) {
      return res.status(400).json({
        success: false,
        message: "Les champs pr√©nom, nom et email sont obligatoires",
      })
    }

    // V√©rifier que l'√©v√©nement existe
    const event = await Event.findByPk(eventId)
    if (!event) {
      return res.status(404).json({
        success: false,
        message: "√âv√©nement non trouv√©",
      })
    }

    // V√©rifier si l'√©v√©nement a encore de la place
    const currentParticipants = await Participant.count({
      where: { eventId },
    })

    if (event.capacity && currentParticipants >= event.capacity) {
      return res.status(400).json({
        success: false,
        message: "L'√©v√©nement est complet",
      })
    }

    // V√©rifier si l'utilisateur n'est pas d√©j√† inscrit
    const existingParticipant = await Participant.findOne({
      where: {
        eventId,
        email: email.toLowerCase(),
      },
    })

    if (existingParticipant) {
      return res.status(400).json({
        success: false,
        message: "Vous √™tes d√©j√† inscrit √† cet √©v√©nement",
      })
    }

    // Cr√©er le participant
    const participantData = {
      id: uuidv4(),
      eventId,
      userId: req.user?.id || null, // Optionnel si utilisateur connect√©
      firstName: firstName.trim(),
      lastName: lastName.trim(),
      email: email.toLowerCase().trim(),
      phone: phone?.trim() || null,
      company: company?.trim() || null,
      position: position?.trim() || null,
      dietaryRestrictions: dietaryRestrictions?.trim() || null,
      specialNeeds: specialNeeds?.trim() || null,
      registrationDate: new Date(),
      status: "registered",
      checkedIn: false,
    }

    const participant = await Participant.create(participantData)

    console.log("‚úÖ Participant cr√©√©:", participant.id)

    res.status(201).json({
      success: true,
      message: "Inscription r√©ussie",
      data: {
        participant: {
          id: participant.id,
          firstName: participant.firstName,
          lastName: participant.lastName,
          email: participant.email,
          status: participant.status,
          registrationDate: participant.registrationDate,
        },
      },
    })
  } catch (error) {
    console.error("‚ùå Erreur inscription participant:", error)
    res.status(500).json({
      success: false,
      message: "Erreur lors de l'inscription",
      error: process.env.NODE_ENV === "development" ? error.message : undefined,
    })
  }
}

// R√©cup√©rer tous les participants d'un √©v√©nement
export const getParticipantsByEvent = async (req, res) => {
  try {
    const { eventId } = req.params

    const participants = await Participant.findAll({
      where: { eventId },
      include: [
        {
          model: User,
          as: "user",
          attributes: ["id", "firstName", "lastName", "email"],
          required: false,
        },
      ],
      order: [["registrationDate", "DESC"]],
    })

    res.json({
      success: true,
      data: { participants },
    })
  } catch (error) {
    console.error("‚ùå Erreur r√©cup√©ration participants:", error)
    res.status(500).json({
      success: false,
      message: "Erreur lors de la r√©cup√©ration des participants",
    })
  }
}

// R√©cup√©rer un participant sp√©cifique
export const getParticipantById = async (req, res) => {
  try {
    const { eventId, participantId } = req.params

    const participant = await Participant.findOne({
      where: {
        id: participantId,
        eventId,
      },
      include: [
        {
          model: User,
          as: "user",
          attributes: ["id", "firstName", "lastName", "email"],
          required: false,
        },
      ],
    })

    if (!participant) {
      return res.status(404).json({
        success: false,
        message: "Participant non trouv√©",
      })
    }

    res.json({
      success: true,
      data: { participant },
    })
  } catch (error) {
    console.error("‚ùå Erreur r√©cup√©ration participant:", error)
    res.status(500).json({
      success: false,
      message: "Erreur lors de la r√©cup√©ration du participant",
    })
  }
}

// Mettre √† jour un participant
export const updateParticipant = async (req, res) => {
  try {
    const { eventId, participantId } = req.params
    const updateData = req.body

    const participant = await Participant.findOne({
      where: {
        id: participantId,
        eventId,
      },
    })

    if (!participant) {
      return res.status(404).json({
        success: false,
        message: "Participant non trouv√©",
      })
    }

    await participant.update(updateData)

    res.json({
      success: true,
      message: "Participant mis √† jour avec succ√®s",
      data: { participant },
    })
  } catch (error) {
    console.error("‚ùå Erreur mise √† jour participant:", error)
    res.status(500).json({
      success: false,
      message: "Erreur lors de la mise √† jour du participant",
    })
  }
}

// Supprimer un participant
export const deleteParticipant = async (req, res) => {
  try {
    const { eventId, participantId } = req.params

    const participant = await Participant.findOne({
      where: {
        id: participantId,
        eventId,
      },
    })

    if (!participant) {
      return res.status(404).json({
        success: false,
        message: "Participant non trouv√©",
      })
    }

    await participant.destroy()

    res.json({
      success: true,
      message: "Participant supprim√© avec succ√®s",
    })
  } catch (error) {
    console.error("‚ùå Erreur suppression participant:", error)
    res.status(500).json({
      success: false,
      message: "Erreur lors de la suppression du participant",
    })
  }
}

// Check-in d'un participant
export const checkInParticipant = async (req, res) => {
  try {
    const { eventId, participantId } = req.params

    const participant = await Participant.findOne({
      where: {
        id: participantId,
        eventId,
      },
    })

    if (!participant) {
      return res.status(404).json({
        success: false,
        message: "Participant non trouv√©",
      })
    }

    await participant.update({
      checkedIn: true,
      checkInTime: new Date(),
    })

    res.json({
      success: true,
      message: "Check-in effectu√© avec succ√®s",
      data: { participant },
    })
  } catch (error) {
    console.error("‚ùå Erreur check-in participant:", error)
    res.status(500).json({
      success: false,
      message: "Erreur lors du check-in",
    })
  }
}
